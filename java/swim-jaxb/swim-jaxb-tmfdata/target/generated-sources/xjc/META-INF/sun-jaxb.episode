<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<bindings xmlns="http://java.sun.com/xml/ns/jaxb" if-exists="true" version="2.1">
  <!--

This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.0 
See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
Any modifications to this file will be lost upon recompilation of the source schema. 
Generated on: 2020.04.03 at 10:08:32 AM EDT 

  -->
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:tfmdataservice" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.tfmdataservice"/>
    </schemaBindings>
    <bindings if-exists="true" scd="tns:tfmDataService">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdataservice.TfmDataService"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tfmdataStatusType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdataservice.TfmdataStatusType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:tfmrequestreplytypes" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:advTmiType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvTmiType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayProgramAdvisoryType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DelayProgramAdvisoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayProgramType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DelayProgramType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryMessageDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryMessageDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteAmendmentResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteAmendmentResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightReconstitutionInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightReconstitutionInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:reqCtopTmiModelType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReqCtopTmiModelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:reqCtopTmiType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReqCtopTmiType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:requestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:replyTmiDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReplyTmiDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:histPopupParType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.HistPopupParType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:idflFlightType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.IdflFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajOptionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TrajOptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ambiguousRouteType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AmbiguousRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteMergeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteMergeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:reroutePreviewAmendmentType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReroutePreviewAmendmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteAmendmentType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteAmendmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:reroutePreviewAmendmentReplyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReroutePreviewAmendmentReplyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:removeRestoreCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RemoveRestoreCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaRerouteType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaRerouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrAdvListType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrAdvListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrFlightList">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrFlightList"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaTMIListType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaTMIListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaFCAFlightsDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaFCAFlightsDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaTrafficCountsDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaTrafficCountsDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaFlightsDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaFlightsDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaModeledReroutesType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaModeledReroutesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaRerouteCtrSeg">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaRerouteCtrSeg"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaRerouteCtrMitType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaRerouteCtrMitType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaRerouteCtrHeadType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaRerouteCtrHeadType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightCancelType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightCancelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fosReplyDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FosReplyDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fosRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FosRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaPrimaryDefinitionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FxaPrimaryDefinitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaDefinitionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FxaDefinitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctSubShowReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctSubShowReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctSlistReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctSlistReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctShowReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctShowReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctListReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctListReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctRemoveRestoreCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctRemoveRestoreCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopReplyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopReplyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctModelResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctModelResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiResyncReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiResyncReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteReplyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteReplyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightScheduleReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightScheduleReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightReconstitutionReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightReconstitutionReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:airportFixDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AirportFixDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:airlineSurfaceDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AirlineSurfaceDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:arptRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ArptRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:activateCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ActivateCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:airportFixReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AirportFixReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopManualOverrideType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopManualOverrideType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopProcessingStatusUpdateType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopProcessingStatusUpdateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightReconDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightReconDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FxaReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:responseMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ResponseMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaReplyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaReplyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:overridePreviewResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OverridePreviewResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctAcCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctAcCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctBridgingToggleCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctBridgingToggleCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctCheckCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctCheckCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctCommandRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctCommandRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctHoldCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctHoldCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctListCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctListCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctLogCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctLogCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctPurgeCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctPurgeCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctReleaseCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctReleaseCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctScsToggleCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctScsToggleCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctShowCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctShowCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctSlistCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctSlistCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctSubToggleCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctSubToggleCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctSubShowCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctSubShowCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctUnassignedSlotsCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctUnassignedSlotsCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctUpdateCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctUpdateCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctCheckReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctCheckReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctUnassignedSlotsReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctUnassignedSlotsReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaDeleteType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FxaDeleteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaUpdateMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FcaUpdateMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightIdRangeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightIdRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:coordinationPointType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CoordinationPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightPlanMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:capacityValuesType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CapacityValuesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:commonCompositeFlightIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CommonCompositeFlightIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FcaIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightCreateType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightCreateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightModifyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightModifyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ssFlightModifyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SsFlightModifyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotCreditSubstitutionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SlotCreditSubstitutionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotCreateType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SlotCreateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:allSlotsType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AllSlotsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:oceanicNonPosRclPositionReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OceanicNonPosRclPositionReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:oceanicPosRclPositionReportType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OceanicPosRclPositionReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:oceanicReportMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OceanicReportMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:oceanicDataBlockType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OceanicDataBlockType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:arrivalSlotType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ArrivalSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrMitRestrictionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrMitRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrSectorDataCommon">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrSectorDataCommon"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrPointDataCommon">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrPointDataCommon"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctrEntryExitTimeCommon">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtrEntryExitTimeCommon"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaModelDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaModelDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaFullModelRequestMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaFullModelRequestMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaViewModelRequestMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaViewModelRequestMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaFXARequestMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaFXARequestMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaModelReplyMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaModelReplyMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaPreviewReplyMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaPreviewReplyMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaTMIListReplyMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaTMIListReplyMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaBaseModelRequestMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaBaseModelRequestMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaCancelRequestMsgType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaCancelRequestMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:inhibitCommandType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.InhibitCommandType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteDeleteType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteDeleteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteDynamicExceptionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteDynamicExceptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteDynamicExceptionResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteDynamicExceptionResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteUpdateType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteUpdateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteCancelType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteCancelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rriaFltIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RriaFltIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:idflFlightListType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.IdflFlightListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:modelStatistics">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ModelStatistics"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayTableType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DelayTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayTableFcaType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DelayTableFcaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopFcaDelayTableType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopFcaDelayTableType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:histPopupDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.HistPopupDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:histPopupReqType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.HistPopupReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:replyIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReplyIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:requestIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RequestIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiReplyDefinitionsType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiReplyDefinitionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:replyType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ReplyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:lastRouteAmendmentType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.LastRouteAmendmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaDefinitionResyncType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FcaDefinitionResyncType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiIdRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiIdRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiIdResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiIdResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryDistributionRequestType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryDistributionRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryDistributionResponseType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryDistributionResponseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:originPositionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OriginPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:distributionResultType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DistributionResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:destinationType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DestinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvisoryMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:timePeriodType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TimePeriodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:generalMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.GeneralMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AdvMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:senderType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SenderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteAdvisoryType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteAdvisoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:titleType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TitleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gdpAfpType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.GdpAfpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:groundStopType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.GroundStopType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiFacilitiesType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiFacilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopFcaType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.CtopFcaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:siteNodeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SiteNodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:addressDestinationType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AddressDestinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiCommonType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiCommonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:progressStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ProgressStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:specialUseIndicatorType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.SpecialUseIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:resultStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ResultStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:serviceType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ServiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctListControlType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.EdctListControlType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaDisplayColumnHeaderType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FcaDisplayColumnHeaderType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:distributionMsgType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DistributionMsgType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:resultType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ResultType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiRequestType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.TmiRequestType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:addressType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.AddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:originNameType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.OriginNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.RerouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.FlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayAssignmentModeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DelayAssignmentModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:dpElementType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.DpElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:messageCategoryType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.MessageCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:programStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmrequestreplytypes.ProgramStatusType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:flightdatacommonmessages" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.flightdatacommonmessages"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:oceanicReportType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.OceanicReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:boundaryCrossingUpdateType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.BoundaryCrossingUpdateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:departureInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.DepartureInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:amendmentDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.AmendmentDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.FlightPlanType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanAmendmentType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.FlightPlanAmendmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:arrivalInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.ArrivalInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:beaconCodeInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.BeaconCodeInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanCancellationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.FlightPlanCancellationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trackInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.TrackInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmAirlineDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmAirlineDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmDiversionCancelDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmDiversionCancelDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmCancelDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmCancelDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmControlDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmControlDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmControlInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmControlInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightCreateOrModifyInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightCreateOrModifyInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightRouteDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightRouteDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightRouteInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightRouteInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightTimeDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightTimeDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightTimeInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightTimeInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmFlightStatusAndSpecDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmFlightStatusAndSpecDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmSectorsInformationType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmSectorsInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ncsmTrackDataType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdatacommonmessages.NcsmTrackDataType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:tfmdatacoreelements" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.tfmdatacoreelements"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:fixType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:routeOfFlightType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.RouteOfFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:requestedAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.RequestedAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:qualifiedAircraftIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.QualifiedAircraftIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:longitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.LongitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:latitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.LatitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightTraversalDataType2">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightTraversalDataType2"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:enRouteElementType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.EnRouteElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:assignedAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.AssignedAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:adaptedRoutNameType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.AdaptedRoutNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:altitudeFixAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.AltitudeFixAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:blockedAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.BlockedAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:coordinationTimeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.CoordinationTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:etaFlightTimeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.EtaFlightTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:etdFlightTimeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.EtdFlightTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fixEventType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FixEventType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fixRadialDistanceType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FixRadialDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightAircraftSpecificationType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightAircraftSpecificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightComputerIdType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightComputerIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanRemarks">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightPlanRemarks"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightPlanSpeedType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightPlanSpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightTimeDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightTimeDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:latlongType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.LatlongType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:oceanicPositionDataType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.OceanicPositionDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:positionType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.PositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:reportedAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.ReportedAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rvsmComplianceType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.RvsmComplianceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:speedType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.SpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:timeOfArrivalType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.TimeOfArrivalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:visualFlightRulesType">
      <class ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.VisualFlightRulesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:aircraftEngineClassType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.AircraftEngineClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:computerSystemIdType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.ComputerSystemIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:controlIndicatorType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.ControlIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:coordinationTimeDescriptorType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.CoordinationTimeDescriptorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:diversionIndicatorType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.DiversionIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:etaTimeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.EtaTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:etdTimeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.EtdTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightClassType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.FlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:generalAircraftCategoryType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.GeneralAircraftCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:generalAircraftUserClassType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.GeneralAircraftUserClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:generalAircraftWeightType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.GeneralAircraftWeightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:latitudeDirectionType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.LatitudeDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:longitudeDirectionType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.LongitudeDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:routeTypesType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.RouteTypesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:specialAircraftQualifierType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.SpecialAircraftQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiVisibilityDomainType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.TmiVisibilityDomainType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:sensitivityType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.tfmdatacoreelements.SensitivityType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:rapttimeline" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.rapttimeline"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:raptDataType">
      <class ref="us.gov.dot.faa.atm.tfm.rapttimeline.RaptDataType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:ficommonmessages2" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.ficommonmessages2"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:fxaSecondaryFilterDefinitionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FxaSecondaryFilterDefinitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fadtReqType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FadtReqType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fosFlowInfoOutputType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FosFlowInfoOutputType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:listMultiSlotType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ListMultiSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopFltDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.CtopFltDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramCommonParamType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamCommonParamType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramGsType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamGsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramAfpGdpType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamAfpGdpType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramCompressionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamCompressionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramBlanketType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamBlanketType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RerouteMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rrFltDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RrFltDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaFlightListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FxaFlightListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiFlightInfoType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.TmiFlightInfoType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:controlledFlightType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ControlledFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:altFixAltType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.AltFixAltType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:blockedAltitudesType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.BlockedAltitudesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:minimumExclusiveAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.MinimumExclusiveAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:filedAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FiledAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:filedFixType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FiledFixType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:vfrOnTopType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.VfrOnTopType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:vfrAltitudeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.VfrAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:canceledStatusType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.CanceledStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayStatusType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.DelayStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SlotDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rankDemotionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RankDemotionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flowFltDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FlowFltDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flowFltListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FlowFltListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:genFlightDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.GenFlightDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:arrivalFixParamsType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ArrivalFixParamsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:paramDeleteType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ParamDeleteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiInfoType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.TmiInfoType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiReferenceType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.TmiReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:secondaryFilterDelType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SecondaryFilterDelType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:requestorIdType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RequestorIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:singleSlotType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SingleSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:multipleSlotType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.MultipleSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:edctOnOffNotificationMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.EdctOnOffNotificationMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotListElementType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SlotListElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotNameType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SlotNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaSecondaryFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FxaSecondaryFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightStateType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FlightStateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:specialSlotType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.SpecialSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:conformanceStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ConformanceStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:originationType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.OriginationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:controlTypeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.ControlTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopExemptReasonType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.CtopExemptReasonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fadtParmType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FadtParmType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fadtDelayModeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.FadtDelayModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiTypeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.TmiTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteErrorType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RerouteErrorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteWarningType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.RerouteWarningType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:amendmentStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.AmendmentStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:amendmentGenerateType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages2.AmendmentGenerateType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:ficommondatatypes" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.ficommondatatypes"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:flightInfoListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.FlightInfoListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:coordinateType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.CoordinateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:dateRangeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.DateRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:dateTimeRangeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.DateTimeRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:slotNameType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.SlotNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:timePeriodType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.TimePeriodType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayInfoType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.DelayInfoType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:facilityListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.FacilityListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:programRateListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.ProgramRateListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:departureScopeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.DepartureScopeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:altitudeRangeType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.AltitudeRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:centerAirportListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.CenterAirportListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:advisoryStateType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.AdvisoryStateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:refreshType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.RefreshType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:controlElementTypeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.ControlElementTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:delayAssignmentModeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.DelayAssignmentModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:onOffType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.OnOffType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiAircraftType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.TmiAircraftType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.TmiStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:elementTypeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.ElementTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:probabilityOfExtensionType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.ProbabilityOfExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:originNameType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.OriginNameType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:propulsionType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.PropulsionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:aircraftCategoryType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.AircraftCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:weightClassType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.WeightClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:userCategoryType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.UserCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:affectedFlightStatus">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.AffectedFlightStatus"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommondatatypes.TmiType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:ficommonmessages" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.ficommonmessages"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:ctopExemptCriteriaType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.CtopExemptCriteriaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:milesInTrailRestrictionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.MilesInTrailRestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:primaryFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.PrimaryFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:anyAllConditionsType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AnyAllConditionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaDisplayPreferencesType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FcaDisplayPreferencesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fca">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.Fca"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:afpCompressionMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AfpCompressionMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gdpCompressionMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GdpCompressionMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gdpBlanketMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GdpBlanketMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gdpAdvisoryMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GdpAdvisoryMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gsAdvisoryMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GsAdvisoryMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:filterConditionsType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FilterConditionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteGeneralDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RerouteGeneralDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:afpAdvisoryMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AfpAdvisoryMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopCancel">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.CtopCancel"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tosType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TosType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajAssignFltDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TrajAssignFltDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajOptionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TrajOptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:icaoRouteCType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.IcaoRouteCType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:errorListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.ErrorListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopTrajAssignType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.CtopTrajAssignType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopTmiType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.CtopTmiType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:baseFxaFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.BaseFxaFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:secondaryAllFcaFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.SecondaryAllFcaFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:secondaryAnyFcaFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.SecondaryAnyFcaFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:primaryAllFcaFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.PrimaryAllFcaFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:primaryAnyFcaFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.PrimaryAnyFcaFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:exemptCriteriaType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.ExemptCriteriaType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaBinType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FcaBinType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fltIdType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FltIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaIdentType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FcaIdentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajOptionsListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TrajOptionsListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:generalAdvisoryType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GeneralAdvisoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:afpCancelMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AfpCancelMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:rerouteAdvisoryListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RerouteAdvisoryListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:segmentDataType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.SegmentDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:flightContainerType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FlightContainerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:routeContainerType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RouteContainerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gsCancelMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GsCancelMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:gdpCancelMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.GdpCancelMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:pointsType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.PointsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:traverseListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TraverseListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:useAirwayListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.UseAirwayListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:locatedListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.LocatedListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:aircraftTypeListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AircraftTypeListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:remarksListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RemarksListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:headingType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.HeadingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:aircraftIdListType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AircraftIdListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:secondaryFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.SecondaryFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:airportConfigType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.AirportConfigType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:deicingType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.DeicingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:restrictionType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RestrictionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:mitFilterType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.MitFilterType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fxaBinType">
      <class ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FxaBinType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaDrawingType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FcaDrawingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:subModeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.SubModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajSourceType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TrajSourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:tmiStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TmiStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ctopTmiStatusType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.CtopTmiStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:routeTypeType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.RouteTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:booleanFlag">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.BooleanFlag"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:includedAircraftType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.IncludedAircraftType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:trajectorySourceType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.TrajectorySourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fcaRemarksType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.ficommonmessages.FcaRemarksType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:flowinformation" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.flowinformation"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:fiOutputType">
      <class ref="us.gov.dot.faa.atm.tfm.flowinformation.FiOutputType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fiMessageAttributes">
      <class ref="us.gov.dot.faa.atm.tfm.flowinformation.FiMessageAttributes"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:messageType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.flowinformation.MessageType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="urn:us:gov:dot:faa:atm:tfm:flightdata" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="us.gov.dot.faa.atm.tfm.flightdata"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:fltdOutputType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdata.FltdOutputType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fltdMessageType">
      <class ref="us.gov.dot.faa.atm.tfm.flightdata.FltdMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:messageType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.flightdata.MessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:fdTriggerType">
      <typesafeEnumClass ref="us.gov.dot.faa.atm.tfm.flightdata.FdTriggerType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.fixm.aero/flight/3.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.fixm.flight._3"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:FlightType">
      <class ref="aero.fixm.flight._3.FlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CommunicationCapabilitiesType">
      <class ref="aero.fixm.flight._3.CommunicationCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationCapabilitiesType">
      <class ref="aero.fixm.flight._3.NavigationCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceCapabilitiesType">
      <class ref="aero.fixm.flight._3.SurveillanceCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DinghyType">
      <class ref="aero.fixm.flight._3.DinghyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DinghyColourType">
      <class ref="aero.fixm.flight._3.DinghyColourType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurvivalCapabilitiesType">
      <class ref="aero.fixm.flight._3.SurvivalCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftType">
      <class ref="aero.fixm.flight._3.AircraftType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftCapabilitiesType">
      <class ref="aero.fixm.flight._3.AircraftCapabilitiesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftTypeType">
      <class ref="aero.fixm.flight._3.AircraftTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioactiveMaterialType">
      <class ref="aero.fixm.flight._3.RadioactiveMaterialType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadionuclideType">
      <class ref="aero.fixm.flight._3.RadionuclideType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AllPackedInOneType">
      <class ref="aero.fixm.flight._3.AllPackedInOneType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DangerousGoodsDimensionsType">
      <class ref="aero.fixm.flight._3.DangerousGoodsDimensionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DangerousGoodsPackageType">
      <class ref="aero.fixm.flight._3.DangerousGoodsPackageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DangerousGoodsPackageGroupType">
      <class ref="aero.fixm.flight._3.DangerousGoodsPackageGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemperaturesType">
      <class ref="aero.fixm.flight._3.TemperaturesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AdditionalHandlingInformationType">
      <class ref="aero.fixm.flight._3.AdditionalHandlingInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DangerousGoodsType">
      <class ref="aero.fixm.flight._3.DangerousGoodsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeclarationTextType">
      <class ref="aero.fixm.flight._3.DeclarationTextType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShippingInformationType">
      <class ref="aero.fixm.flight._3.ShippingInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StructuredPostalAddressType">
      <class ref="aero.fixm.flight._3.StructuredPostalAddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightArrivalType">
      <class ref="aero.fixm.flight._3.FlightArrivalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureActivityTimesType">
      <class ref="aero.fixm.flight._3.DepartureActivityTimesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightDepartureType">
      <class ref="aero.fixm.flight._3.FlightDepartureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightEmergencyType">
      <class ref="aero.fixm.flight._3.FlightEmergencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LastContactType">
      <class ref="aero.fixm.flight._3.LastContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LastPositionReportType">
      <class ref="aero.fixm.flight._3.LastPositionReportType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioCommunicationFailureType">
      <class ref="aero.fixm.flight._3.RadioCommunicationFailureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinationStatusType">
      <class ref="aero.fixm.flight._3.CoordinationStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BoundaryCrossingType">
      <class ref="aero.fixm.flight._3.BoundaryCrossingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HandoffType">
      <class ref="aero.fixm.flight._3.HandoffType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitBoundaryType">
      <class ref="aero.fixm.flight._3.UnitBoundaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CpdlcConnectionType">
      <class ref="aero.fixm.flight._3.CpdlcConnectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ActualSpeedType">
      <class ref="aero.fixm.flight._3.ActualSpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftPositionType">
      <class ref="aero.fixm.flight._3.AircraftPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PlannedReportingPositionType">
      <class ref="aero.fixm.flight._3.PlannedReportingPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceConstraintType">
      <class ref="aero.fixm.flight._3.AirspaceConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BeaconCodeAssignmentType">
      <class ref="aero.fixm.flight._3.BeaconCodeAssignmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClearedFlightInformationType">
      <class ref="aero.fixm.flight._3.ClearedFlightInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ControlElementType">
      <class ref="aero.fixm.flight._3.ControlElementType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectRoutingType">
      <class ref="aero.fixm.flight._3.DirectRoutingType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteType">
      <class ref="aero.fixm.flight._3.EnRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointoutType">
      <class ref="aero.fixm.flight._3.PointoutType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClimbToLevelConstraintType">
      <class ref="aero.fixm.flight._3.ClimbToLevelConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteConstraintOrPreferenceType">
      <class ref="aero.fixm.flight._3.RouteConstraintOrPreferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LevelConstraintType">
      <class ref="aero.fixm.flight._3.LevelConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpeedConstraintType">
      <class ref="aero.fixm.flight._3.SpeedConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeConstraintType">
      <class ref="aero.fixm.flight._3.TimeConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractRoutePointType">
      <class ref="aero.fixm.flight._3.AbstractRoutePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ElapsedTimeLocationType">
      <class ref="aero.fixm.flight._3.ElapsedTimeLocationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EstimatedElapsedTimeType">
      <class ref="aero.fixm.flight._3.EstimatedElapsedTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExpandedRouteType">
      <class ref="aero.fixm.flight._3.ExpandedRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExpandedRoutePointType">
      <class ref="aero.fixm.flight._3.ExpandedRoutePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteType">
      <class ref="aero.fixm.flight._3.RouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RoutePointType">
      <class ref="aero.fixm.flight._3.RoutePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteSegmentType">
      <class ref="aero.fixm.flight._3.RouteSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpeedScheduleType">
      <class ref="aero.fixm.flight._3.SpeedScheduleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MeteorologicalDataType">
      <class ref="aero.fixm.flight._3.MeteorologicalDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:Point4DType">
      <class ref="aero.fixm.flight._3.Point4DType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PointRangeType">
      <class ref="aero.fixm.flight._3.PointRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemporalRangeType">
      <class ref="aero.fixm.flight._3.TemporalRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectoryType">
      <class ref="aero.fixm.flight._3.TrajectoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectoryChangeType">
      <class ref="aero.fixm.flight._3.TrajectoryChangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectoryPointType">
      <class ref="aero.fixm.flight._3.TrajectoryPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectoryRoutePairType">
      <class ref="aero.fixm.flight._3.TrajectoryRoutePairType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RankedTrajectoryType">
      <class ref="aero.fixm.flight._3.RankedTrajectoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightStatusType">
      <class ref="aero.fixm.flight._3.FlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftOperatorType">
      <class ref="aero.fixm.flight._3.AircraftOperatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EnRouteDiversionType">
      <class ref="aero.fixm.flight._3.EnRouteDiversionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightIdentificationType">
      <class ref="aero.fixm.flight._3.FlightIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OriginatorType">
      <class ref="aero.fixm.flight._3.OriginatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SupplementalDataType">
      <class ref="aero.fixm.flight._3.SupplementalDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioactiveMaterialActivityType">
      <class ref="aero.fixm.flight._3.RadioactiveMaterialActivityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HazardClassType">
      <class ref="aero.fixm.flight._3.HazardClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirWaybillType">
      <class ref="aero.fixm.flight._3.AirWaybillType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeInTransitionType">
      <class ref="aero.fixm.flight._3.AltitudeInTransitionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CommunicationCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.CommunicationCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DataLinkCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.DataLinkCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NavigationCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.NavigationCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PerformanceBasedCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.PerformanceBasedCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurveillanceCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.SurveillanceCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DinghyColourCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.DinghyColourCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DinghyCoverType">
      <typesafeEnumClass ref="aero.fixm.flight._3.DinghyCoverType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EmergencyRadioCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.EmergencyRadioCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LifeJacketCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.LifeJacketCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SurvivalEquipmentCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.SurvivalEquipmentCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftPerformanceCategoryType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AircraftPerformanceCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EngineTypeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.EngineTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandardCapabilitiesIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.StandardCapabilitiesIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WakeTurbulenceCategoryType">
      <typesafeEnumClass ref="aero.fixm.flight._3.WakeTurbulenceCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FissileExceptedType">
      <typesafeEnumClass ref="aero.fixm.flight._3.FissileExceptedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MaterialDispersabilityType">
      <typesafeEnumClass ref="aero.fixm.flight._3.MaterialDispersabilityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioactiveMaterialCategoryType">
      <typesafeEnumClass ref="aero.fixm.flight._3.RadioactiveMaterialCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioactivityMeasureType">
      <typesafeEnumClass ref="aero.fixm.flight._3.RadioactivityMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialFormType">
      <typesafeEnumClass ref="aero.fixm.flight._3.SpecialFormType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MarinePollutantIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.MarinePollutantIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OverpackIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.OverpackIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PackingGroupType">
      <typesafeEnumClass ref="aero.fixm.flight._3.PackingGroupType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShipmentUseType">
      <typesafeEnumClass ref="aero.fixm.flight._3.ShipmentUseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AircraftDangerousGoodsLimitationType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AircraftDangerousGoodsLimitationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ShipmentTypeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.ShipmentTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LandingLimitsType">
      <typesafeEnumClass ref="aero.fixm.flight._3.LandingLimitsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:EmergencyPhaseType">
      <typesafeEnumClass ref="aero.fixm.flight._3.EmergencyPhaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbrogationReasonCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AbrogationReasonCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinationStatusCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.CoordinationStatusCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NonStandardCoordinationReasonType">
      <typesafeEnumClass ref="aero.fixm.flight._3.NonStandardCoordinationReasonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReleaseConditionsType">
      <typesafeEnumClass ref="aero.fixm.flight._3.ReleaseConditionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BoundaryCrossingConditionType">
      <typesafeEnumClass ref="aero.fixm.flight._3.BoundaryCrossingConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitBoundaryIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.UnitBoundaryIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CpdlcConnectionStatusType">
      <typesafeEnumClass ref="aero.fixm.flight._3.CpdlcConnectionStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CpdlcStartRequestIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.CpdlcStartRequestIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FrequencyUsageType">
      <typesafeEnumClass ref="aero.fixm.flight._3.FrequencyUsageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PositionReportSourceType">
      <typesafeEnumClass ref="aero.fixm.flight._3.PositionReportSourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeQualifierType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AltitudeQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConstraintOrPreferenceCategoryType">
      <typesafeEnumClass ref="aero.fixm.flight._3.ConstraintOrPreferenceCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PositionQualifierType">
      <typesafeEnumClass ref="aero.fixm.flight._3.PositionQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeQualifierType">
      <typesafeEnumClass ref="aero.fixm.flight._3.TimeQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClearanceLimitIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.ClearanceLimitIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectoryChangePointTypeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.TrajectoryChangePointTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AssignedIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AssignedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirborneHoldIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AirborneHoldIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirfileIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.AirfileIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightAcceptedIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.FlightAcceptedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightCycleType">
      <typesafeEnumClass ref="aero.fixm.flight._3.FlightCycleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightSuspendedIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.FlightSuspendedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MissedApproachIndicatorType">
      <typesafeEnumClass ref="aero.fixm.flight._3.MissedApproachIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OperatorCategoryType">
      <typesafeEnumClass ref="aero.fixm.flight._3.OperatorCategoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialHandlingCodeType">
      <typesafeEnumClass ref="aero.fixm.flight._3.SpecialHandlingCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TypeOfFlightType">
      <typesafeEnumClass ref="aero.fixm.flight._3.TypeOfFlightType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.fixm.aero/base/3.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.fixm.base._3"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:FeatureType">
      <class ref="aero.fixm.base._3.FeatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FixPointType">
      <class ref="aero.fixm.base._3.FixPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SignificantPointType">
      <class ref="aero.fixm.base._3.SignificantPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LocationPointType">
      <class ref="aero.fixm.base._3.LocationPointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RelativePointType">
      <class ref="aero.fixm.base._3.RelativePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExtendedMultiTimeType">
      <class ref="aero.fixm.base._3.ExtendedMultiTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MultiTimeType">
      <class ref="aero.fixm.base._3.MultiTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ReportedTimeType">
      <class ref="aero.fixm.base._3.ReportedTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TargetMultiTimeType">
      <class ref="aero.fixm.base._3.TargetMultiTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeSequenceType">
      <class ref="aero.fixm.base._3.TimeSequenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AerodromeReferenceType">
      <class ref="aero.fixm.base._3.AerodromeReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IcaoAerodromeReferenceType">
      <class ref="aero.fixm.base._3.IcaoAerodromeReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayPositionAndTimeType">
      <class ref="aero.fixm.base._3.RunwayPositionAndTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandPositionAndTimeType">
      <class ref="aero.fixm.base._3.StandPositionAndTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnlistedAerodromeReferenceType">
      <class ref="aero.fixm.base._3.UnlistedAerodromeReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspeedChoiceType">
      <class ref="aero.fixm.base._3.AirspeedChoiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspeedRangeType">
      <class ref="aero.fixm.base._3.AirspeedRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeChoiceType">
      <class ref="aero.fixm.base._3.AltitudeChoiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundspeedChoiceType">
      <class ref="aero.fixm.base._3.GroundspeedChoiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundspeedRangeType">
      <class ref="aero.fixm.base._3.GroundspeedRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LateralOfftrackType">
      <class ref="aero.fixm.base._3.LateralOfftrackType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NameValueListType">
      <class ref="aero.fixm.base._3.NameValueListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NameValuePairType">
      <class ref="aero.fixm.base._3.NameValuePairType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OfftrackDistanceType">
      <class ref="aero.fixm.base._3.OfftrackDistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalRangeType">
      <class ref="aero.fixm.base._3.VerticalRangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AtcUnitReferenceType">
      <class ref="aero.fixm.base._3.AtcUnitReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IdentifiedUnitReferenceType">
      <class ref="aero.fixm.base._3.IdentifiedUnitReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnknownUnitReferenceType">
      <class ref="aero.fixm.base._3.UnknownUnitReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ExtensionType">
      <class ref="aero.fixm.base._3.ExtensionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionType">
      <class ref="aero.fixm.base._3.DirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BeaconCodeType">
      <class ref="aero.fixm.base._3.BeaconCodeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GloballyUniqueFlightIdentifierType">
      <class ref="aero.fixm.base._3.GloballyUniqueFlightIdentifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RadioFrequencyType">
      <class ref="aero.fixm.base._3.RadioFrequencyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpeedType">
      <class ref="aero.fixm.base._3.SpeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DirectionReferenceType">
      <typesafeEnumClass ref="aero.fixm.base._3.DirectionReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirTrafficTypeType">
      <typesafeEnumClass ref="aero.fixm.base._3.AirTrafficTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightRulesType">
      <typesafeEnumClass ref="aero.fixm.base._3.FlightRulesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FrequencyMeasureType">
      <typesafeEnumClass ref="aero.fixm.base._3.FrequencyMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OfftrackDirectionType">
      <typesafeEnumClass ref="aero.fixm.base._3.OfftrackDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OfftrackReasonType">
      <typesafeEnumClass ref="aero.fixm.base._3.OfftrackReasonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpeedConditionType">
      <typesafeEnumClass ref="aero.fixm.base._3.SpeedConditionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SsrModeType">
      <typesafeEnumClass ref="aero.fixm.base._3.SsrModeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DelegatedUnitIndicatorType">
      <typesafeEnumClass ref="aero.fixm.base._3.DelegatedUnitIndicatorType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.fixm.aero/tfm/3.1" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.fixm.tfm._3"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:TfmFlightDataChangeType">
      <class ref="aero.fixm.tfm._3.TfmFlightDataChangeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmIInternationalFlighDataType">
      <class ref="aero.fixm.tfm._3.TfmIInternationalFlighDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmTfdmFlightType">
      <class ref="aero.fixm.tfm._3.TfmTfdmFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmTerminalFlighDataType">
      <class ref="aero.fixm.tfm._3.TfmTerminalFlighDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmSensitivityType">
      <typesafeEnumClass ref="aero.fixm.tfm._3.TfmSensitivityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmSensitivityReasonType">
      <typesafeEnumClass ref="aero.fixm.tfm._3.TfmSensitivityReasonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmBusinessFunctionType">
      <typesafeEnumClass ref="aero.fixm.tfm._3.TfmBusinessFunctionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmIcaoMessageType">
      <typesafeEnumClass ref="aero.fixm.tfm._3.TfmIcaoMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmTfdmMessageType">
      <typesafeEnumClass ref="aero.fixm.tfm._3.TfmTfdmMessageType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.fixm.aero/foundation/3.0" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.fixm.foundation._3"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:ContactInformationType">
      <class ref="aero.fixm.foundation._3.ContactInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OnlineContactType">
      <class ref="aero.fixm.foundation._3.OnlineContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PostalAddressType">
      <class ref="aero.fixm.foundation._3.PostalAddressType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TelephoneContactType">
      <class ref="aero.fixm.foundation._3.TelephoneContactType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DimensionsType">
      <class ref="aero.fixm.foundation._3.DimensionsType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GeographicLocationType">
      <class ref="aero.fixm.foundation._3.GeographicLocationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:OrganizationType">
      <class ref="aero.fixm.foundation._3.OrganizationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PersonType">
      <class ref="aero.fixm.foundation._3.PersonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PersonOrOrganizationType">
      <class ref="aero.fixm.foundation._3.PersonOrOrganizationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TimeSpanType">
      <class ref="aero.fixm.foundation._3.TimeSpanType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:UnitSectorAirspaceType">
      <class ref="aero.fixm.foundation._3.UnitSectorAirspaceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspeedInIasOrMachType">
      <class ref="aero.fixm.foundation._3.AirspeedInIasOrMachType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleType">
      <class ref="aero.fixm.foundation._3.AngleType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceType">
      <class ref="aero.fixm.foundation._3.DistanceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundspeedType">
      <class ref="aero.fixm.foundation._3.GroundspeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LengthType">
      <class ref="aero.fixm.foundation._3.LengthType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PressureType">
      <class ref="aero.fixm.foundation._3.PressureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemperatureType">
      <class ref="aero.fixm.foundation._3.TemperatureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrueAirspeedOrMachType">
      <class ref="aero.fixm.foundation._3.TrueAirspeedOrMachType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VolumeType">
      <class ref="aero.fixm.foundation._3.VolumeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WeightType">
      <class ref="aero.fixm.foundation._3.WeightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WindDirectionType">
      <class ref="aero.fixm.foundation._3.WindDirectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WindspeedType">
      <class ref="aero.fixm.foundation._3.WindspeedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeType">
      <class ref="aero.fixm.foundation._3.AltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalRateType">
      <class ref="aero.fixm.foundation._3.VerticalRateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceTypeType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.AirspaceTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspeedMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.AirspeedMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AngleMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.AngleMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DistanceMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.DistanceMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:GroundspeedMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.GroundspeedMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:LengthMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.LengthMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PressureMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.PressureMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TemperatureMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.TemperatureMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VolumeMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.VolumeMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WeightMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.WeightMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WindSpeedMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.WindSpeedMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.AltitudeMeasureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltitudeReferenceType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.AltitudeReferenceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VerticalRateMeasureType">
      <typesafeEnumClass ref="aero.fixm.foundation._3.VerticalRateMeasureType"/>
    </bindings>
  </bindings>
  <bindings xmlns:tns="http://www.faa.aero/nas/3.1" if-exists="true" scd="x-schema::tns">
    <schemaBindings map="false">
      <package name="aero.faa.nas._3"/>
    </schemaBindings>
    <bindings if-exists="true" scd="~tns:NasAircraftType">
      <class ref="aero.faa.nas._3.NasAircraftType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasPerformanceBasedAccuracyType">
      <class ref="aero.faa.nas._3.NasPerformanceBasedAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AltFixAltAltitudeType">
      <class ref="aero.faa.nas._3.AltFixAltAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:BlockAltitudeType">
      <class ref="aero.faa.nas._3.BlockAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAltitudeType">
      <class ref="aero.faa.nas._3.NasAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VfrAltitudeType">
      <class ref="aero.faa.nas._3.VfrAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VfrOnTopAltitudeType">
      <class ref="aero.faa.nas._3.VfrOnTopAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalSlotType">
      <class ref="aero.faa.nas._3.ArrivalSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ConstrainedAirspaceEntryType">
      <class ref="aero.faa.nas._3.ConstrainedAirspaceEntryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CtopExemptionType">
      <class ref="aero.faa.nas._3.CtopExemptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasTrajectoryOptionType">
      <class ref="aero.faa.nas._3.NasTrajectoryOptionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:PreImplicitSubstitutionType">
      <class ref="aero.faa.nas._3.PreImplicitSubstitutionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAdvisoryType">
      <class ref="aero.faa.nas._3.NasAdvisoryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasRerouteType">
      <class ref="aero.faa.nas._3.NasRerouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasTmiType">
      <class ref="aero.faa.nas._3.NasTmiType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasArrivalType">
      <class ref="aero.faa.nas._3.NasArrivalType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayAcceptableSlotSubstitutionType">
      <class ref="aero.faa.nas._3.RunwayAcceptableSlotSubstitutionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayArrivalTimeType">
      <class ref="aero.faa.nas._3.RunwayArrivalTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsEstimatedArrivalTimeType">
      <class ref="aero.faa.nas._3.TfmsEstimatedArrivalTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasHandoffType">
      <class ref="aero.faa.nas._3.NasHandoffType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasUnitBoundaryType">
      <class ref="aero.faa.nas._3.NasUnitBoundaryType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasDepartureType">
      <class ref="aero.faa.nas._3.NasDepartureType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RunwayDepartureTimeType">
      <class ref="aero.faa.nas._3.RunwayDepartureTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsEstimatedDepartureTimeType">
      <class ref="aero.faa.nas._3.TfmsEstimatedDepartureTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceAcceptableSlotSubstitutionType">
      <class ref="aero.faa.nas._3.AirspaceAcceptableSlotSubstitutionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceEntryTimeType">
      <class ref="aero.faa.nas._3.AirspaceEntryTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AirspaceExitTimeType">
      <class ref="aero.faa.nas._3.AirspaceExitTimeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAirspaceConstraintType">
      <class ref="aero.faa.nas._3.NasAirspaceConstraintType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasClearedFlightInformationType">
      <class ref="aero.faa.nas._3.NasClearedFlightInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasEnRouteType">
      <class ref="aero.faa.nas._3.NasEnRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ArrivalMovementAreaHoldInformationType">
      <class ref="aero.faa.nas._3.ArrivalMovementAreaHoldInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingInformationType">
      <class ref="aero.faa.nas._3.DeicingInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DepartureMovementAreaHoldInformationType">
      <class ref="aero.faa.nas._3.DepartureMovementAreaHoldInformationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightIntentType">
      <class ref="aero.faa.nas._3.FlightIntentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightPlanType">
      <class ref="aero.faa.nas._3.NasFlightPlanType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAirspeedChoiceType">
      <class ref="aero.faa.nas._3.NasAirspeedChoiceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasCoordinationType">
      <class ref="aero.faa.nas._3.NasCoordinationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightType">
      <class ref="aero.faa.nas._3.NasFlightType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightIdentificationType">
      <class ref="aero.faa.nas._3.NasFlightIdentificationType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasSupplementalDataType">
      <class ref="aero.faa.nas._3.NasSupplementalDataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AbstractMessageType">
      <class ref="aero.faa.nas._3.AbstractMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:FlightMessageType">
      <class ref="aero.faa.nas._3.FlightMessageType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MessageCollectionType">
      <class ref="aero.faa.nas._3.MessageCollectionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:MessageMetadataType">
      <class ref="aero.faa.nas._3.MessageMetadataType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TriggerType">
      <class ref="aero.faa.nas._3.TriggerType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAircraftPositionType">
      <class ref="aero.faa.nas._3.NasAircraftPositionType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasVelocityType">
      <class ref="aero.faa.nas._3.NasVelocityType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAdaptedArrivalRouteType">
      <class ref="aero.faa.nas._3.NasAdaptedArrivalRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAdaptedRouteType">
      <class ref="aero.faa.nas._3.NasAdaptedRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasExpandedRouteType">
      <class ref="aero.faa.nas._3.NasExpandedRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasRouteType">
      <class ref="aero.faa.nas._3.NasRouteType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasRoutePointType">
      <class ref="aero.faa.nas._3.NasRoutePointType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasRouteSegmentType">
      <class ref="aero.faa.nas._3.NasRouteSegmentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RouteImpactListType">
      <class ref="aero.faa.nas._3.RouteImpactListType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightStatusType">
      <class ref="aero.faa.nas._3.NasFlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CmsAccuracyType">
      <class ref="aero.faa.nas._3.CmsAccuracyType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsInstrumentRouteDesignatorType">
      <class ref="aero.faa.nas._3.TfmsInstrumentRouteDesignatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AboveAltitudeType">
      <class ref="aero.faa.nas._3.AboveAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SimpleAltitudeType">
      <class ref="aero.faa.nas._3.SimpleAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VfrOnTopPlusAltitudeType">
      <class ref="aero.faa.nas._3.VfrOnTopPlusAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:VfrPlusAltitudeType">
      <class ref="aero.faa.nas._3.VfrPlusAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasPositionAltitudeType">
      <class ref="aero.faa.nas._3.NasPositionAltitudeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CmsAccuracyTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.CmsAccuracyTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasAirborneEquipmentQualifierType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasAirborneEquipmentQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasPerformanceBasedNavigationPhaseType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasPerformanceBasedNavigationPhaseType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasSpecialAircraftQualifierType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasSpecialAircraftQualifierType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsAircraftWeightClassType">
      <typesafeEnumClass ref="aero.faa.nas._3.TfmsAircraftWeightClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:WakeTurbulenceCategoryExtendedType">
      <typesafeEnumClass ref="aero.faa.nas._3.WakeTurbulenceCategoryExtendedType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsRouteTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.TfmsRouteTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CtopExemptIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.CtopExemptIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CtopExemptReasonType">
      <typesafeEnumClass ref="aero.faa.nas._3.CtopExemptReasonType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ManualOverrideIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.ManualOverrideIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SpecialSlotType">
      <typesafeEnumClass ref="aero.faa.nas._3.SpecialSlotType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TrajectorySourceType">
      <typesafeEnumClass ref="aero.faa.nas._3.TrajectorySourceType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:AdvisoryTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.AdvisoryTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ControlIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.ControlIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ControlTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.ControlTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RerouteInclusionIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.RerouteInclusionIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RerouteTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.RerouteTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SlotHoldStatusType">
      <typesafeEnumClass ref="aero.faa.nas._3.SlotHoldStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SlotYieldedIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.SlotYieldedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsEstimatedArrivalTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.TfmsEstimatedArrivalTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasHandoffEventType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasHandoffEventType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsEstimatedDepartureTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.TfmsEstimatedDepartureTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DeicingIntentType">
      <typesafeEnumClass ref="aero.faa.nas._3.DeicingIntentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:HoldIntentType">
      <typesafeEnumClass ref="aero.faa.nas._3.HoldIntentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:StandReturnIntentType">
      <typesafeEnumClass ref="aero.faa.nas._3.StandReturnIntentType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ClassifiedSpeedIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.ClassifiedSpeedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:ComputerSystemIdType">
      <typesafeEnumClass ref="aero.faa.nas._3.ComputerSystemIdType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:CoordinationTimeTypeType">
      <typesafeEnumClass ref="aero.faa.nas._3.CoordinationTimeTypeType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:DiversionStateType">
      <typesafeEnumClass ref="aero.faa.nas._3.DiversionStateType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightClassType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasFlightClassType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RVSMEquippedIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.RVSMEquippedIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:RVSMFlightIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.RVSMFlightIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InvalidIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.InvalidIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasCoastIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasCoastIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:IncompleteIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.IncompleteIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InhibitAdaptedArrRoutesIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.InhibitAdaptedArrRoutesIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:InhibitAdaptedDepRoutesIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.InhibitAdaptedDepRoutesIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:NasFlightRulesType">
      <typesafeEnumClass ref="aero.faa.nas._3.NasFlightRulesType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TailoredIndicatorType">
      <typesafeEnumClass ref="aero.faa.nas._3.TailoredIndicatorType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:SfdpsFlightStatusType">
      <typesafeEnumClass ref="aero.faa.nas._3.SfdpsFlightStatusType"/>
    </bindings>
    <bindings if-exists="true" scd="~tns:TfmsFlightStatusType">
      <typesafeEnumClass ref="aero.faa.nas._3.TfmsFlightStatusType"/>
    </bindings>
  </bindings>
</bindings>
